import {InlineKeyboard} from "grammy";
import {Button} from "../structures/Button";
import {Channel} from "../schemas/Channel.schema";
import {Admin} from "../schemas/Admin.schema";

export default class AutoApproveTimeout extends Button {
    constructor() {
        super({name: "approvetimeout"});
    }

    async run(ctx, bot) {
        const ctxUser = await ctx.getAuthor();
        const admin = await Admin.findOne({_id: ctxUser.user.id});
        const channel = await Channel.findOne({_id: admin.editingChannel});
        if (channel.autoApprove.switched) {
            const lastTimeout = channel.autoApprove.timeOut

            const inlineKeyboard = new InlineKeyboard()
                .text(lastTimeout === 0 ? "0 —Å ‚úÖ" : "0 —Å", "approve-timeout-0")
                .text(lastTimeout === 3000 ? "3 —Å ‚úÖ" : "3 —Å", "approve-timeout-3000")
                .text(lastTimeout === 5000 ? "5 —Å ‚úÖ" : "5 —Å", "approve-timeout-5000")
                .text(lastTimeout === 10000 ? "10 —Å ‚úÖ" : "10 —Å", "approve-timeout-10000").row()
                .text(lastTimeout === 15000 ? "15 —Å ‚úÖ" : "15 —Å", "approve-timeout-15000")
                .text(lastTimeout === 30000 ? "30 —Å ‚úÖ" : "30 —Å", "approve-timeout-30000")
                .text(lastTimeout === 60000 ? "1 –º ‚úÖ" : "1 –º", "approve-timeout-60000")
                .text(lastTimeout === 120000 ? "2 –º ‚úÖ" : "2 –º", "approve-timeout-120000").row()
                .text(lastTimeout === 180000 ? "3 –º ‚úÖ" : "3 –º", "approve-timeout-180000")
                .text(lastTimeout === 240000 ? "4 –º ‚úÖ" : "4 –º", "approve-timeout-240000")
                .text(lastTimeout === 300000 ? "5 –º ‚úÖ" : "5 –º", "approve-timeout-300000")
                .text(lastTimeout === 600000 ? "10 –º ‚úÖ" : "10 –º", "approve-timeout-600000").row()
                .text(lastTimeout === 900000 ? "15 –º ‚úÖ" : "15 –º", "approve-timeout-900000")
                .text(lastTimeout === 1800000 ? "30 –º ‚úÖ" : "30 –º", "approve-timeout-1800000")
                .text(lastTimeout === 3600000 ? "1 —á ‚úÖ" : "1 —á", "approve-timeout-3600000")
                .text(lastTimeout === 7200000 ? "2 —á ‚úÖ" : "2 —á", "approve-timeout-7200000").row()
                .text(lastTimeout === 21600000 ? "6 —á ‚úÖ" : "6 —á", "approve-timeout-21600000")
                .text(lastTimeout === 43200000 ? "12 —á ‚úÖ" : "12 —á", "approve-timeout-43200000")
                .text(lastTimeout === 64800000 ? "18 —á ‚úÖ" : "18 —á", "approve-timeout-64800000")
                .text(lastTimeout === 86400000 ? "24 —á ‚úÖ" : "24 —á", "approve-timeout-86400000").row()
                .text("üîô –ù–∞–∑–∞–¥", "back-channel-2").row();

            const buttonRow = inlineKeyboard.row();
            await ctx.api.editMessageText(ctx.update.callback_query.message.chat.id, ctx.update.callback_query.message.message_id, `‚öôÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É`);
            await ctx.api.editMessageReplyMarkup(ctx.update.callback_query.message.chat.id, ctx.update.callback_query.message.message_id, {reply_markup: buttonRow});
            await ctx.answerCallbackQuery()
        } else {
            const inlineKeyboard = new InlineKeyboard()
                .text("üëã –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", "greeting").row()
                .text("ü´Ç –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—â–∞–Ω–∏–µ", "leaving").row()
                .text(`ü§ñ ${channel.captcha ? "–í—ã–∫–ª—é—á–∏—Ç—å" : "–í–∫–ª—é—á–∏—Ç—å"} –∫–∞–ø—á—É`, "captcha").row()
                .text("üì´ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", "spam").row()
                .text("üí¨ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç", "make-post").row()
                .text(`üëå –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫`, "approve-settings").row()
                .text("üîô –ù–∞–∑–∞–¥", "back-channel-1").row()

            const buttonRow = inlineKeyboard.row();

            await ctx.api.editMessageText(ctx.update.callback_query.message.chat.id, ctx.update.callback_query.message.message_id, `‚ùå –£ –≤–∞—Å –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–æ–∫.\n‚öôÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å`);
            await ctx.api.editMessageReplyMarkup(ctx.update.callback_query.message.chat.id, ctx.update.callback_query.message.message_id, {reply_markup: buttonRow});
            await ctx.answerCallbackQuery()
        }
    }
}