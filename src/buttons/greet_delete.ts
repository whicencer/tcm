import {InlineKeyboard} from "grammy";
import {Button} from "../structures/Button";
import {Admin} from "../schemas/Admin.schema";
import {Channel} from "../schemas/Channel.schema";

export default class GreetDelete extends Button {
    constructor() {
        super({name: "greet_delete"});
    }

    async run(ctx, bot) {
        const ctxUser = await ctx.getAuthor();
        const admin = await Admin.findOne({_id: ctxUser.user.id});
        const channel = await Channel.findOne({_id: admin.editingChannel});

        channel.greeting = [...channel.greeting.filter((val, index) => index !== parseInt(ctx.update.callback_query.data.split("_")[2]))]
        await channel.save()

        const inlineKeyboard = new InlineKeyboard()

        if (channel.greeting.length) {
            for (const greet of channel.greeting) {
   const timeOut = `‚åõ ${(greet.timeOut / 1000) > 60 ? (greet.timeOut / 1000 / 60 / 60) > 1 ? `${(greet.timeOut / 1000 / 60 /60)}—á.` :`${(greet.timeOut / 1000 / 60)}–º.` : `${greet.timeOut / 1000}—Å.`}`;
                const autoDelete = greet?.autoDelete ? `‚ùå ${(greet.autoDelete / 1000) > 60 ? (greet.autoDelete / 1000 / 60 / 60) > 1 ? `${(greet.autoDelete / 1000 / 60 /60)}—á.` :`${(greet.autoDelete / 1000 / 60)}–º.` : `${greet.autoDelete / 1000}—Å.`}` : ""
                inlineKeyboard.text(`${timeOut} ${autoDelete}`, "a")
                inlineKeyboard.text(`${greet.text.slice(0, 10)}...`, `greetedit_${channel.greeting.indexOf(greet)}`).row()
            }
        }

        inlineKeyboard
            .text("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", "add-greeting")
            .text("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", "delete-greeting").row()
            .text("üîô –ù–∞–∑–∞–¥", "back-channel-2").row()

        const buttonRow = inlineKeyboard.row();
        await ctx.api.editMessageText(ctx.update.callback_query.message.chat.id, ctx.update.callback_query.message.message_id, "‚úÖ –£—Å–ø–µ—à–Ω–æ! –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —É–¥–∞–ª–µ–Ω–æ!");
        await ctx.api.editMessageReplyMarkup(ctx.update.callback_query.message.chat.id, ctx.update.callback_query.message.message_id, {reply_markup: buttonRow});
        await ctx.answerCallbackQuery()
    }
}